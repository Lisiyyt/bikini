import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime

API_TOKEN = "8404274800:AAFiG1ZDTH9jrFz1c15g4geA5ZXQR_mwruE"  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ----- –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• -----
users = {}
cassa = {}  # –∫–∞—Å—Å–∞ –∑–∞ –º–µ—Å—è—Ü

# ----- –ö–ù–û–ü–ö–ò -----
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu"),
         InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üìë –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="directions"),
         InlineKeyboardButton(text="‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data="extra")]
    ])

def extra_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤", callback_data="top")]
    ])

# ----- /start -----
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"user{user_id}"

    if user_id not in users:
        users[user_id] = {
            "username": username,
            "balance": 0,
            "profits_day": 0,
            "profits_month": 0,
            "profits_all": 0
        }
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bikini Bottom Team üèù", reply_markup=main_menu())

# ----- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö -----
@dp.callback_query()
async def callbacks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or f"user{user_id}"

    if callback.data == "menu":
        await callback.message.answer(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ BIKINI BOTTOM TEAM\n\n"
            "üë§ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞:\n‚îú 50%\n\n"
            "üìë –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n‚îú ICloud | worküìó",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª –ø—Ä–æ—Ñ–∏—Ç–æ–≤", url="https://t.me/")],
                [InlineKeyboardButton(text="‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data="extra")]
            ])
        )

    elif callback.data == "profile":
        user = users.get(user_id)
        if user:
            await callback.message.answer(
                f"üçÉ –í–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n\n"
                f"üë§ Username: @{user['username']}\nüÜî ID: {user_id}\n\n"
                f"üí≥ –í–∞—à –∫–æ—à–µ–ª—ë–∫\n‚îú –ë–∞–ª–∞–Ω—Å: {user['balance']}$\n\n"
                f"üí≤ –í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã\n"
                f"‚îú –ó–∞ –¥–µ–Ω—å: {user['profits_day']} –ø—Ä–æ—Ñ–∏—Ç–æ–≤\n"
                f"‚îú –ó–∞ –º–µ—Å—è—Ü: {user['profits_month']} –ø—Ä–æ—Ñ–∏—Ç–æ–≤\n"
                f"‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user['profits_all']} –ø—Ä–æ—Ñ–∏—Ç–æ–≤"
            )

    elif callback.data == "extra":
        await callback.message.answer("‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:", reply_markup=extra_menu())

    elif callback.data == "rules":
        await callback.message.answer("üìú –ü—Ä–∞–≤–∏–ª–∞: –†–∞–±–æ—Ç–∞—Ç—å —á–µ—Å—Ç–Ω–æ, –ø—Ä–æ—Ñ–∏—Ç—ã –ø–∏—Å–∞—Ç—å –ø–æ —Ñ–æ—Ä–º–∞—Ç—É!")

    elif callback.data == "directions":
        await callback.message.answer("ü•∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è...\n\nICloud ‚òÅÔ∏è")

# ----- –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–§–ò–¢–û–í –ò –ö–ê–°–°–´ -----
@dp.message()
async def handle_profit(message: types.Message):
    text = message.text.strip()

    # –ü–†–û–§–ò–¢
    if "–ï—Å—Ç—å –ø—Ä–æ—Ñ–∏—Ç" in text:
        try:
            username = text.split()[0].replace("@", "").replace(",", "").strip()
            amount = int(text.split(" ")[-1].replace("$", "").strip())

            # –∏—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = None
            for uid, data in users.items():
                if data["username"] == username:
                    user_id = uid
                    break

            if not user_id:
                user_id = f"virtual_{username}"
                users[user_id] = {
                    "username": username,
                    "balance": 0,
                    "profits_day": 0,
                    "profits_month": 0,
                    "profits_all": 0
                }

            user = users[user_id]
            user["profits_day"] += 1
            user["profits_month"] += 1
            user["profits_all"] += 1
            user["balance"] += amount

            # –∫–∞—Å—Å–∞
            if user_id not in cassa:
                cassa[user_id] = []
            cassa[user_id].append(f"{amount}$")

            await message.reply(f"‚úÖ –ü—Ä–æ—Ñ–∏—Ç —É—á—Ç—ë–Ω –¥–ª—è @{username}: {amount}$")

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏—Ç–∞:", e)

    # –ö–ê–°–°–ê
    elif text == "/cassa":
        if not cassa:
            await message.answer("–ö–∞—Å—Å–∞ –ø—É—Å—Ç–∞.")
        else:
            lines = []
            for uid, profits in cassa.items():
                user = users[uid]
                lines.append(f"@{user['username']} ‚ûù {', '.join(profits)}")
            await message.answer("üìä –ö–∞—Å—Å–∞:\n" + "\n".join(lines))

# ----- –°–ë–†–û–° –ö–ê–°–°–´ –ü–û –ú–ï–°–Ø–¶–ê–ú -----
async def reset_monthly():
    while True:
        now = datetime.now()
        if now.day == 1 and now.hour == 0 and now.minute == 0:
            for uid in users:
                users[uid]["profits_month"] = 0
                users[uid]["profits_day"] = 0
            cassa.clear()
        await asyncio.sleep(60)

# ----- –ó–ê–ü–£–°–ö –ë–û–¢–ê -----
async def main():
    asyncio.create_task(reset_monthly())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

